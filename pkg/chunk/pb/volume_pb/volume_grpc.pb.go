// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: volume.proto

package volume_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VolumeService_PutChunk_FullMethodName    = "/volume_pb.VolumeService/PutChunk"
	VolumeService_GetChunk_FullMethodName    = "/volume_pb.VolumeService/GetChunk"
	VolumeService_DeleteChunk_FullMethodName = "/volume_pb.VolumeService/DeleteChunk"
)

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumeServiceClient interface {
	PutChunk(ctx context.Context, opts ...grpc.CallOption) (VolumeService_PutChunkClient, error)
	GetChunk(ctx context.Context, in *ChunkID, opts ...grpc.CallOption) (VolumeService_GetChunkClient, error)
	DeleteChunk(ctx context.Context, in *ChunkID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type volumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeServiceClient(cc grpc.ClientConnInterface) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) PutChunk(ctx context.Context, opts ...grpc.CallOption) (VolumeService_PutChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &VolumeService_ServiceDesc.Streams[0], VolumeService_PutChunk_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServicePutChunkClient{stream}
	return x, nil
}

type VolumeService_PutChunkClient interface {
	Send(*ChunkData) error
	CloseAndRecv() (*ChunkID, error)
	grpc.ClientStream
}

type volumeServicePutChunkClient struct {
	grpc.ClientStream
}

func (x *volumeServicePutChunkClient) Send(m *ChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *volumeServicePutChunkClient) CloseAndRecv() (*ChunkID, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ChunkID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) GetChunk(ctx context.Context, in *ChunkID, opts ...grpc.CallOption) (VolumeService_GetChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &VolumeService_ServiceDesc.Streams[1], VolumeService_GetChunk_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceGetChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeService_GetChunkClient interface {
	Recv() (*ChunkData, error)
	grpc.ClientStream
}

type volumeServiceGetChunkClient struct {
	grpc.ClientStream
}

func (x *volumeServiceGetChunkClient) Recv() (*ChunkData, error) {
	m := new(ChunkData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) DeleteChunk(ctx context.Context, in *ChunkID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VolumeService_DeleteChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
// All implementations must embed UnimplementedVolumeServiceServer
// for forward compatibility
type VolumeServiceServer interface {
	PutChunk(VolumeService_PutChunkServer) error
	GetChunk(*ChunkID, VolumeService_GetChunkServer) error
	DeleteChunk(context.Context, *ChunkID) (*emptypb.Empty, error)
	mustEmbedUnimplementedVolumeServiceServer()
}

// UnimplementedVolumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (UnimplementedVolumeServiceServer) PutChunk(VolumeService_PutChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method PutChunk not implemented")
}
func (UnimplementedVolumeServiceServer) GetChunk(*ChunkID, VolumeService_GetChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedVolumeServiceServer) DeleteChunk(context.Context, *ChunkID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunk not implemented")
}
func (UnimplementedVolumeServiceServer) mustEmbedUnimplementedVolumeServiceServer() {}

// UnsafeVolumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeServiceServer will
// result in compilation errors.
type UnsafeVolumeServiceServer interface {
	mustEmbedUnimplementedVolumeServiceServer()
}

func RegisterVolumeServiceServer(s grpc.ServiceRegistrar, srv VolumeServiceServer) {
	s.RegisterService(&VolumeService_ServiceDesc, srv)
}

func _VolumeService_PutChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VolumeServiceServer).PutChunk(&volumeServicePutChunkServer{stream})
}

type VolumeService_PutChunkServer interface {
	SendAndClose(*ChunkID) error
	Recv() (*ChunkData, error)
	grpc.ServerStream
}

type volumeServicePutChunkServer struct {
	grpc.ServerStream
}

func (x *volumeServicePutChunkServer) SendAndClose(m *ChunkID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *volumeServicePutChunkServer) Recv() (*ChunkData, error) {
	m := new(ChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VolumeService_GetChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChunkID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServiceServer).GetChunk(m, &volumeServiceGetChunkServer{stream})
}

type VolumeService_GetChunkServer interface {
	Send(*ChunkData) error
	grpc.ServerStream
}

type volumeServiceGetChunkServer struct {
	grpc.ServerStream
}

func (x *volumeServiceGetChunkServer) Send(m *ChunkData) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeService_DeleteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).DeleteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeService_DeleteChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).DeleteChunk(ctx, req.(*ChunkID))
	}
	return interceptor(ctx, in, info, handler)
}

// VolumeService_ServiceDesc is the grpc.ServiceDesc for VolumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "volume_pb.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteChunk",
			Handler:    _VolumeService_DeleteChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutChunk",
			Handler:       _VolumeService_PutChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetChunk",
			Handler:       _VolumeService_GetChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "volume.proto",
}
